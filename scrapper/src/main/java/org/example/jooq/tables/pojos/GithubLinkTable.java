/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.tables.pojos;


import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.io.Serializable;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GithubLinkTable implements Serializable {

    private static final long serialVersionUID = 1L;

    private String linkUrl;
    private Integer branchCount;

    public GithubLinkTable() {}

    public GithubLinkTable(GithubLinkTable value) {
        this.linkUrl = value.linkUrl;
        this.branchCount = value.branchCount;
    }

    @ConstructorProperties({ "linkUrl", "branchCount" })
    public GithubLinkTable(
        @NotNull String linkUrl,
        @NotNull Integer branchCount
    ) {
        this.linkUrl = linkUrl;
        this.branchCount = branchCount;
    }

    /**
     * Getter for <code>GITHUB_LINK_TABLE.LINK_URL</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 256)
    @NotNull
    public String getLinkUrl() {
        return this.linkUrl;
    }

    /**
     * Setter for <code>GITHUB_LINK_TABLE.LINK_URL</code>.
     */
    public void setLinkUrl(@NotNull String linkUrl) {
        this.linkUrl = linkUrl;
    }

    /**
     * Getter for <code>GITHUB_LINK_TABLE.BRANCH_COUNT</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getBranchCount() {
        return this.branchCount;
    }

    /**
     * Setter for <code>GITHUB_LINK_TABLE.BRANCH_COUNT</code>.
     */
    public void setBranchCount(@NotNull Integer branchCount) {
        this.branchCount = branchCount;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final GithubLinkTable other = (GithubLinkTable) obj;
        if (this.linkUrl == null) {
            if (other.linkUrl != null)
                return false;
        }
        else if (!this.linkUrl.equals(other.linkUrl))
            return false;
        if (this.branchCount == null) {
            if (other.branchCount != null)
                return false;
        }
        else if (!this.branchCount.equals(other.branchCount))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.linkUrl == null) ? 0 : this.linkUrl.hashCode());
        result = prime * result + ((this.branchCount == null) ? 0 : this.branchCount.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("GithubLinkTable (");

        sb.append(linkUrl);
        sb.append(", ").append(branchCount);

        sb.append(")");
        return sb.toString();
    }
}
