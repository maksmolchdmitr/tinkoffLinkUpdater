/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.example.jooq.DefaultSchema;
import org.example.jooq.Keys;
import org.example.jooq.tables.records.LinkTableRecord;
import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LinkTable extends TableImpl<LinkTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LINK_TABLE</code>
     */
    public static final LinkTable LINK_TABLE = new LinkTable();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<LinkTableRecord> getRecordType() {
        return LinkTableRecord.class;
    }

    /**
     * The column <code>LINK_TABLE.URL</code>.
     */
    public final TableField<LinkTableRecord, String> URL = createField(DSL.name("URL"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>LINK_TABLE.LAST_UPDATE</code>.
     */
    public final TableField<LinkTableRecord, LocalDateTime> LAST_UPDATE = createField(DSL.name("LAST_UPDATE"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>LINK_TABLE.IS_GITHUB_LINK</code>.
     */
    public final TableField<LinkTableRecord, Boolean> IS_GITHUB_LINK = createField(DSL.name("IS_GITHUB_LINK"), SQLDataType.BOOLEAN, this, "");

    private LinkTable(Name alias, Table<LinkTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private LinkTable(Name alias, Table<LinkTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LINK_TABLE</code> table reference
     */
    public LinkTable(String alias) {
        this(DSL.name(alias), LINK_TABLE);
    }

    /**
     * Create an aliased <code>LINK_TABLE</code> table reference
     */
    public LinkTable(Name alias) {
        this(alias, LINK_TABLE);
    }

    /**
     * Create a <code>LINK_TABLE</code> table reference
     */
    public LinkTable() {
        this(DSL.name("LINK_TABLE"), null);
    }

    public <O extends Record> LinkTable(Table<O> child, ForeignKey<O, LinkTableRecord> key) {
        super(child, key, LINK_TABLE);
    }

    @Override
    @NotNull
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public UniqueKey<LinkTableRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_9;
    }

    @Override
    @NotNull
    public LinkTable as(String alias) {
        return new LinkTable(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public LinkTable as(Name alias) {
        return new LinkTable(alias, this);
    }

    @Override
    @NotNull
    public LinkTable as(Table<?> alias) {
        return new LinkTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public LinkTable rename(String name) {
        return new LinkTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public LinkTable rename(Name name) {
        return new LinkTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public LinkTable rename(Table<?> name) {
        return new LinkTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row3<String, LocalDateTime, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super LocalDateTime, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super LocalDateTime, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
