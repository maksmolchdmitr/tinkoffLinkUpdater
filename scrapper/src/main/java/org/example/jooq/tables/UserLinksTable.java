/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.example.jooq.DefaultSchema;
import org.example.jooq.Keys;
import org.example.jooq.tables.records.UserLinksTableRecord;
import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserLinksTable extends TableImpl<UserLinksTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>USER_LINKS_TABLE</code>
     */
    public static final UserLinksTable USER_LINKS_TABLE = new UserLinksTable();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<UserLinksTableRecord> getRecordType() {
        return UserLinksTableRecord.class;
    }

    /**
     * The column <code>USER_LINKS_TABLE.USER_CHAT_ID</code>.
     */
    public final TableField<UserLinksTableRecord, Integer> USER_CHAT_ID = createField(DSL.name("USER_CHAT_ID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>USER_LINKS_TABLE.LINK_URL</code>.
     */
    public final TableField<UserLinksTableRecord, String> LINK_URL = createField(DSL.name("LINK_URL"), SQLDataType.VARCHAR(256), this, "");

    private UserLinksTable(Name alias, Table<UserLinksTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserLinksTable(Name alias, Table<UserLinksTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>USER_LINKS_TABLE</code> table reference
     */
    public UserLinksTable(String alias) {
        this(DSL.name(alias), USER_LINKS_TABLE);
    }

    /**
     * Create an aliased <code>USER_LINKS_TABLE</code> table reference
     */
    public UserLinksTable(Name alias) {
        this(alias, USER_LINKS_TABLE);
    }

    /**
     * Create a <code>USER_LINKS_TABLE</code> table reference
     */
    public UserLinksTable() {
        this(DSL.name("USER_LINKS_TABLE"), null);
    }

    public <O extends Record> UserLinksTable(Table<O> child, ForeignKey<O, UserLinksTableRecord> key) {
        super(child, key, USER_LINKS_TABLE);
    }

    @Override
    @NotNull
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public List<UniqueKey<UserLinksTableRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_URL_AND_CHAT_ID);
    }

    @Override
    @NotNull
    public List<ForeignKey<UserLinksTableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_6, Keys.CONSTRAINT_6F);
    }

    private transient UserTable _userTable;
    private transient LinkTable _linkTable;

    /**
     * Get the implicit join path to the <code>PUBLIC.USER_TABLE</code> table.
     */
    public UserTable userTable() {
        if (_userTable == null)
            _userTable = new UserTable(this, Keys.CONSTRAINT_6);

        return _userTable;
    }

    /**
     * Get the implicit join path to the <code>PUBLIC.LINK_TABLE</code> table.
     */
    public LinkTable linkTable() {
        if (_linkTable == null)
            _linkTable = new LinkTable(this, Keys.CONSTRAINT_6F);

        return _linkTable;
    }

    @Override
    @NotNull
    public UserLinksTable as(String alias) {
        return new UserLinksTable(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public UserLinksTable as(Name alias) {
        return new UserLinksTable(alias, this);
    }

    @Override
    @NotNull
    public UserLinksTable as(Table<?> alias) {
        return new UserLinksTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public UserLinksTable rename(String name) {
        return new UserLinksTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public UserLinksTable rename(Name name) {
        return new UserLinksTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public UserLinksTable rename(Table<?> name) {
        return new UserLinksTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
