/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.tables.records;


import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.example.jooq.tables.GithubLinkTable;
import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GithubLinkTableRecord extends UpdatableRecordImpl<GithubLinkTableRecord> implements Record2<String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>GITHUB_LINK_TABLE.LINK_URL</code>.
     */
    public void setLinkUrl(@NotNull String value) {
        set(0, value);
    }

    /**
     * Getter for <code>GITHUB_LINK_TABLE.LINK_URL</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 256)
    @NotNull
    public String getLinkUrl() {
        return (String) get(0);
    }

    /**
     * Setter for <code>GITHUB_LINK_TABLE.BRANCH_COUNT</code>.
     */
    public void setBranchCount(@NotNull Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>GITHUB_LINK_TABLE.BRANCH_COUNT</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getBranchCount() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row2<String, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row2<String, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<String> field1() {
        return GithubLinkTable.GITHUB_LINK_TABLE.LINK_URL;
    }

    @Override
    @NotNull
    public Field<Integer> field2() {
        return GithubLinkTable.GITHUB_LINK_TABLE.BRANCH_COUNT;
    }

    @Override
    @NotNull
    public String component1() {
        return getLinkUrl();
    }

    @Override
    @NotNull
    public Integer component2() {
        return getBranchCount();
    }

    @Override
    @NotNull
    public String value1() {
        return getLinkUrl();
    }

    @Override
    @NotNull
    public Integer value2() {
        return getBranchCount();
    }

    @Override
    @NotNull
    public GithubLinkTableRecord value1(@NotNull String value) {
        setLinkUrl(value);
        return this;
    }

    @Override
    @NotNull
    public GithubLinkTableRecord value2(@NotNull Integer value) {
        setBranchCount(value);
        return this;
    }

    @Override
    @NotNull
    public GithubLinkTableRecord values(@NotNull String value1, @NotNull Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GithubLinkTableRecord
     */
    public GithubLinkTableRecord() {
        super(GithubLinkTable.GITHUB_LINK_TABLE);
    }

    /**
     * Create a detached, initialised GithubLinkTableRecord
     */
    @ConstructorProperties({ "linkUrl", "branchCount" })
    public GithubLinkTableRecord(@NotNull String linkUrl, @NotNull Integer branchCount) {
        super(GithubLinkTable.GITHUB_LINK_TABLE);

        setLinkUrl(linkUrl);
        setBranchCount(branchCount);
    }

    /**
     * Create a detached, initialised GithubLinkTableRecord
     */
    public GithubLinkTableRecord(org.example.jooq.tables.pojos.GithubLinkTable value) {
        super(GithubLinkTable.GITHUB_LINK_TABLE);

        if (value != null) {
            setLinkUrl(value.getLinkUrl());
            setBranchCount(value.getBranchCount());
        }
    }
}
