/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.tables.records;


import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.example.jooq.tables.UserTable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserTableRecord extends UpdatableRecordImpl<UserTableRecord> implements Record2<Integer, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>USER_TABLE.CHAT_ID</code>.
     */
    public void setChatId(@NotNull Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>USER_TABLE.CHAT_ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getChatId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>USER_TABLE.USERNAME</code>.
     */
    public void setUsername(@Nullable String value) {
        set(1, value);
    }

    /**
     * Getter for <code>USER_TABLE.USERNAME</code>.
     */
    @Size(max = 32)
    @Nullable
    public String getUsername() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row2<Integer, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Integer> field1() {
        return UserTable.USER_TABLE.CHAT_ID;
    }

    @Override
    @NotNull
    public Field<String> field2() {
        return UserTable.USER_TABLE.USERNAME;
    }

    @Override
    @NotNull
    public Integer component1() {
        return getChatId();
    }

    @Override
    @Nullable
    public String component2() {
        return getUsername();
    }

    @Override
    @NotNull
    public Integer value1() {
        return getChatId();
    }

    @Override
    @Nullable
    public String value2() {
        return getUsername();
    }

    @Override
    @NotNull
    public UserTableRecord value1(@NotNull Integer value) {
        setChatId(value);
        return this;
    }

    @Override
    @NotNull
    public UserTableRecord value2(@Nullable String value) {
        setUsername(value);
        return this;
    }

    @Override
    @NotNull
    public UserTableRecord values(@NotNull Integer value1, @Nullable String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserTableRecord
     */
    public UserTableRecord() {
        super(UserTable.USER_TABLE);
    }

    /**
     * Create a detached, initialised UserTableRecord
     */
    @ConstructorProperties({ "chatId", "username" })
    public UserTableRecord(@NotNull Integer chatId, @Nullable String username) {
        super(UserTable.USER_TABLE);

        setChatId(chatId);
        setUsername(username);
    }

    /**
     * Create a detached, initialised UserTableRecord
     */
    public UserTableRecord(org.example.jooq.tables.pojos.UserTable value) {
        super(UserTable.USER_TABLE);

        if (value != null) {
            setChatId(value.getChatId());
            setUsername(value.getUsername());
        }
    }
}
